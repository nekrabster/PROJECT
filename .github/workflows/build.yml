name: Build Windows EXE with Nuitka (Clang + LTO + Parallel)

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]

jobs:
  build:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Windows 2022 –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–∞–ª–∏—á–∏—è Clang –∏ MSVC Dev Cmd
    runs-on: windows-2022

    steps:
      - name: üßæ Checkout code
        uses: actions/checkout@v4

      - name: üêç Setup Python 3.13 (–∫–µ—à pip)
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: üì¶ Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è Nuitka
          pip install --upgrade nuitka

      - name: üß∞ Setup MSVC Dev Cmd (Windows SDK)
        uses: ilammy/msvc-dev-cmd@v1

      - name: ‚öôÔ∏è Install LLVM/Clang 17
        uses: egor-tensin/setup-clang@v1
        with:
          version: 17

      - name: üîç Find certifi cacert.pem
        id: certifi_path
        shell: bash
        run: |
          echo "certifi_path=$(python -c 'import certifi; print(certifi.where())')" >> $GITHUB_OUTPUT

      - name: üîß Build .exe with Nuitka
        shell: pwsh
        env:
          PYTHONIOENCODING: "utf-8"
          PYTHONLEGACYWINDOWSSTDIO: "utf-8"
          # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ clang-cl –≤–º–µ—Å—Ç–æ MSVC
          CC: "clang-cl"
          CXX: "clang-cl"
        run: |
          python -m nuitka main.py `
            --standalone `                         # –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π .exe
            --onefile `                            # —É–ø–∞–∫–æ–≤–∞—Ç—å –≤—Å—ë –≤ –æ–¥–∏–Ω .exe
            --clang `                              # –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å clang-cl
            --lto=yes `                            # link-time optimizations
            --jobs=$(Get-ComputerInfo | Select-Object -Expand CpuLogicalProcessorCount) `  
                                                  # –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∫–æ–º–ø–∏–ª—è—Ü–∏—è –ø–æ –≤—Å–µ–º –ª–æ–≥–∏—á–µ—Å–∫–∏–º —è–¥—Ä–∞–º
            --enable-plugin=pyqt6 `               # –ø–ª–∞–≥–∏–Ω –¥–ª—è PyQt6
            --enable-plugin=data-files `          # –∞–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
            --include-package=ui `                # –≤—Å–µ –≤–∞—à–∏ –º–æ–¥—É–ª–∏ UI
            --include-data-dir=icons=icons `      # –ø–∞–ø–∫–∞ —Å png/ico
            --include-data-file="${{ steps.certifi_path.outputs.certifi_path }}=certifi/cacert.pem" `
                                                  # —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–ª—è HTTPS
            --windows-icon-from-ico=icon.ico `    # –∏–∫–æ–Ω–∫–∞ exe
            --output-dir=dist `
            --output-filename=Soft-K.exe `
            --remove-output `                     # —á–∏—Å—Ç–∏–º dist –ø–µ—Ä–µ–¥ —Å–±–æ—Ä–∫–æ–π
            --follow-imports `
            --assume-yes-for-downloads `
            --verbose                             # –ø–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥

      - name: ‚òÅÔ∏è Upload .exe as artifact
        uses: actions/upload-artifact@v4
        with:
          name: Soft-K.exe
          path: dist/Soft-K.exe
          retention-days: 3