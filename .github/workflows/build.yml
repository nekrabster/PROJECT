name: Build Windows EXE with Nuitka (Two-Stage)

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: üßæ Checkout code
        uses: actions/checkout@v4

      - name: üêç Set up Python 3.13.2
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.2'

      - name: üÜô Upgrade pip
        run: python -m pip install --upgrade pip

      - name: üì¶ Install requirements
        run: pip install -r requirements.txt

      - name: üåô Install latest Nuitka
        run: pip install --upgrade nuitka

      - name: üß∞ Setup MSVC for Clang
        uses: ilammy/msvc-dev-cmd@v1

      - name: ‚öôÔ∏è Install LLVM (Clang)
        uses: egor-tensin/setup-clang@v1
        with:
          version: 17

      - name: üîç Find certifi cacert.pem path
        id: certifi_path
        shell: bash
        run: |
          echo "certifi_path=$(python -c 'import certifi; print(certifi.where())')" >> $GITHUB_OUTPUT

      # üöß –≠—Ç–∞–ø 1: –ö–æ–º–ø–∏–ª—è—Ü–∏—è –≤—Å–µ—Ö .py –≤ .pyd
      - name: üîß Compile modules to .pyd
        shell: pwsh
        run: |
          $env:CC = "clang-cl"
          $env:CXX = "clang-cl"
          $modules = Get-ChildItem -Recurse -Filter *.py -Path .\ui | Where-Object { $_.Name -ne "main.py" }
          foreach ($mod in $modules) {
            nuitka `
              $mod.FullName `
              --module `
              --output-dir=compiled `
              --remove-output `
              --jobs=4 `
              --no-pyi-file `
              --clang `
              --lto=yes `
              --msvc=latest `
              --python-flag=no_docstrings `
              --python-flag=no_site `
              --disable-dll-dependency-cache `
              --disable-ccache `
              --cf-protection=none
          }

      # üßπ –£–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤ –ø–æ—Å–ª–µ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ .pyd
      - name: üóë Remove .py source files
        shell: bash
        run: |
          find ./ui -name "*.py" ! -name "main.py" -type f -delete

      # üõ† –≠—Ç–∞–ø 2: –°–±–æ—Ä–∫–∞ main.py –≤ .exe
      - name: üöÄ Build final .exe with Nuitka
        shell: pwsh
        env:
          PYTHONIOENCODING: "utf-8"
          PYTHONLEGACYWINDOWSSTDIO: "utf-8"
        run: |
          $env:CC = "clang-cl"
          $env:CXX = "clang-cl"
          nuitka `
            main.py `
            --standalone `
            --onefile `
            --remove-output `
            --output-dir=dist `
            --output-filename=Soft-K `
            --windows-icon-from-ico=icon.ico `
            --assume-yes-for-downloads `
            --disable-console `
            --follow-imports `
            --enable-plugin=pyqt6 `
            --enable-plugin=data-files `
            --clang `
            --lto=yes `
            --jobs=4 `
            --no-pyi-file `
            --python-flag=no_asserts `
            --python-flag=no_docstrings `
            --python-flag=no_site `
            --cf-protection=none `
            --disable-dll-dependency-cache `
            --disable-ccache `
            --msvc=latest `
            --include-data-file="${{ steps.certifi_path.outputs.certifi_path }}=certifi/cacert.pem" `
            --include-data-dir=icons=icons `
            --windows-company-name="SecureSoft" `
            --windows-product-name="Soft-K" `
            --windows-product-version="2.4.0" `
            --report=build-report.txt

      - name: ‚òÅÔ∏è Upload .exe as artifact
        uses: actions/upload-artifact@v4
        with:
          name: Soft-K.exe
          path: dist/Soft-K.exe

      - name: üìã Upload build logs (if failed)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build_logs
          path: |
            build/
            *.log
