import os, io, re, json, asyncio, random, string, inspect
from typing import Optional, Dict, List, Any
from PIL import Image
from faker import Faker
from PyQt6.QtCore import Qt, pyqtSignal, pyqtSlot
from PyQt6.QtGui import QIcon
from PyQt6.QtWidgets import (
    QDialog, QVBoxLayout, QHBoxLayout, QPushButton,
    QTextEdit, QFileDialog, QLabel, QCheckBox, QMessageBox,
    QSizePolicy, QGroupBox, QLineEdit, QInputDialog
)
from telethon.errors import (
    FloodWaitError, PasswordHashInvalidError
)
from telethon.tl.functions.account import UpdateProfileRequest, UpdateUsernameRequest
from telethon.tl.functions.photos import UploadProfilePhotoRequest
from ui.loader import load_config, load_proxy
from ui.progress import ProgressWidget
from ui.apphuy import (
    TelegramConnection, TelegramErrorType,
    TelegramError
)
from datetime import datetime
from ui.thread_base import ThreadStopMixin, BaseThread
def update_session_json(session_path, **kwargs):
    json_path = session_path.replace('.session', '.json')
    log_func = None
    frame = inspect.currentframe()
    while frame:
        if 'self' in frame.f_locals and hasattr(frame.f_locals['self'], 'log_signal'):
            log_func = lambda msg: frame.f_locals['self'].log_signal.emit(msg)
            break
        frame = frame.f_back
    if log_func is None:
        log_func = print
    try:
        with open(json_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        if 'twoFA' in kwargs:
            data['twoFA'] = kwargs['twoFA']
        for k, v in kwargs.items():
            if k != 'twoFA':
                data[k] = v
        with open(json_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
    except Exception as e:
        pass
class SimManagerWindow(QDialog, ThreadStopMixin):
    def __init__(self, session_folder, selected_sessions=None, parent=None):
        super().__init__(parent)
        ThreadStopMixin.__init__(self)
        self.session_folder = session_folder
        self.selected_sessions = selected_sessions or []
        self.completed_sessions = set()
        self.total_sessions = len(self.selected_sessions)
        self.active_param = None
        self.running = False
        self._is_closing = False
        self.report_shown = False
        self.verify_session_paths()
        self.setup_ui()
        config = load_config()
        self.proxy = load_proxy(config) if config else None
        if self.selected_sessions:
            if len(self.selected_sessions) == 1:
                self.log_area.append(f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏: {os.path.basename(self.selected_sessions[0])}")
            else:
                self.log_area.append(f"üìù –í—ã–±—Ä–∞–Ω–æ —Å–µ—Å—Å–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {len(self.selected_sessions)}")
    def verify_session_paths(self, *args, **kwargs):
        verified_sessions = []
        for session_path in self.selected_sessions:
            if not os.path.isabs(session_path):
                session_path = os.path.join(self.session_folder, session_path)
            if os.path.exists(session_path):
                verified_sessions.append(session_path)
        else:
            print(f"–§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {session_path}")
        self.selected_sessions = verified_sessions
        self.total_sessions = len(self.selected_sessions)
    def setup_ui(self, *args, **kwargs):
        main_layout = QVBoxLayout(self)
        self.setWindowTitle("–†–µ–¥–∞–∫—Ç–æ—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π")
        if len(self.selected_sessions) == 1:
            self.setWindowTitle(f"–†–µ–¥–∞–∫—Ç–æ—Ä –ø—Ä–æ—Ñ–∏–ª—è: {os.path.basename(self.selected_sessions[0])}")
        self.setMinimumWidth(900)
        self.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Expanding)
        global_controls_layout = QHBoxLayout()
        self.use_proxy_checkbox = QCheckBox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏")
        global_controls_layout.addWidget(self.use_proxy_checkbox)
        global_controls_layout.addStretch(1)
        main_layout.addLayout(global_controls_layout)
        profile_editing_group = QGroupBox("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è")
        profile_editing_layout = QVBoxLayout()
        buttons_row1 = QHBoxLayout()
        self.change_name_btn = QPushButton("–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è")
        self.change_lastname_btn = QPushButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é")
        self.change_bio_btn = QPushButton("–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ")
        buttons_row1.addWidget(self.change_name_btn)
        buttons_row1.addWidget(self.change_lastname_btn)
        buttons_row1.addWidget(self.change_bio_btn)
        profile_editing_layout.addLayout(buttons_row1)
        buttons_row2 = QHBoxLayout()
        self.change_avatar_btn = QPushButton("–ò–∑–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä")
        self.change_2fa_btn = QPushButton("–ò–∑–º–µ–Ω–∏—Ç—å 2FA")
        buttons_row2.addWidget(self.change_avatar_btn)
        buttons_row2.addWidget(self.change_2fa_btn)
        profile_editing_layout.addLayout(buttons_row2)
        self.param_input = QLineEdit(self)
        self.param_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ...")
        profile_editing_layout.addWidget(self.param_input)
        image_folder_layout = QHBoxLayout()
        self.select_image_folder_btn = QPushButton("–í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤")
        self.select_image_folder_btn.clicked.connect(self.select_image_folder)
        image_folder_layout.addWidget(self.select_image_folder_btn)
        self.image_folder_label = QLabel("–ü–∞–ø–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
        image_folder_layout.addWidget(self.image_folder_label)
        image_folder_layout.addStretch(1)
        profile_editing_layout.addLayout(image_folder_layout)
        profile_editing_group.setLayout(profile_editing_layout)
        main_layout.addWidget(profile_editing_group)
        bulk_actions_group = QGroupBox("–ú–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
        bulk_actions_layout = QVBoxLayout()
        self.fill_profile_btn = QPushButton("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ü—Ä–æ—Ñ–∏–ª—è")
        self.fill_profile_btn.setObjectName("FillProfileButton")
        self.fill_profile_btn.setIcon(QIcon("icons/icon65.png"))
        gradient_style = """
QPushButton#FillProfileButton {
    background: qradialgradient(
        cx:0.5, cy:0.5, radius: 1,
        stop:0 #FF0000,
        stop:0.2 #FF1493,
        stop:0.4 #FF69B4,
        stop:0.6 #FFB6C1,
        stop:0.8 #FFC0CB,
        stop:1 #FFFFFF
    );
    border-radius: 10px;
    color: black;
    padding: 10px;
    font-weight: bold;
}
"""
        self.fill_profile_btn.setStyleSheet(gradient_style)
        bulk_actions_layout.addWidget(self.fill_profile_btn, alignment=Qt.AlignmentFlag.AlignCenter)
        bulk_actions_group.setLayout(bulk_actions_layout)
        main_layout.addWidget(bulk_actions_group)
        control_panel = QHBoxLayout()
        self.start_btn = QPushButton("‚ñ∂ –ù–∞—á–∞—Ç—å")
        self.stop_btn = QPushButton("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        self.stop_btn.setEnabled(False)
        control_panel.addWidget(self.start_btn)
        control_panel.addWidget(self.stop_btn)
        main_layout.addLayout(control_panel)
        self.progress_widget = ProgressWidget(self)
        main_layout.addWidget(self.progress_widget)
        self.log_area = QTextEdit()
        self.log_area.setReadOnly(True)
        main_layout.addWidget(self.log_area)
        self.change_name_btn.clicked.connect(lambda: self.set_active_param('first_name', self.change_name_btn))
        self.change_lastname_btn.clicked.connect(lambda: self.set_active_param('last_name', self.change_lastname_btn))
        self.change_bio_btn.clicked.connect(lambda: self.set_active_param('about', self.change_bio_btn))
        self.change_avatar_btn.clicked.connect(lambda: self.set_active_param('avatar', self.change_avatar_btn))
        self.change_2fa_btn.clicked.connect(lambda: self.set_active_param('twoFA', self.change_2fa_btn))
        self.fill_profile_btn.clicked.connect(self.on_fill_profile_clicked)
        self.start_btn.clicked.connect(self.handle_start)
        self.stop_btn.clicked.connect(self.handle_stop)
        self.active_param = None
        self.param_buttons = [
            self.change_name_btn, self.change_lastname_btn,
            self.change_bio_btn, self.change_avatar_btn,
            self.change_2fa_btn
        ]
    def set_active_param(self, param: str, btn: QPushButton, *args, **kwargs) -> None:
        self.active_param = param
        for b in self.param_buttons:
            if b == btn:
                b.setStyleSheet("background-color: #aee571;")
            else:
                b.setStyleSheet("")
        if param == 'avatar':
            self.param_input.setEnabled(False)
            self.param_input.setPlaceholderText("–î–ª—è –∞–≤–∞—Ç–∞—Ä–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")
        else:
            self.param_input.setEnabled(True)
            self.param_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ...")
    def select_image_folder(self, *args, **kwargs):
        folder = QFileDialog.getExistingDirectory(self, "–í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")
        if folder:
            self.image_folder = folder
            if self.active_param == 'avatar':
                self.image_folder_label.setText(f"–ü–∞–ø–∫–∞: {folder}")
                self.log_area.append(f"–í—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {folder}")
            else:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ '–ò–∑–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä'!")
        else:
            self.log_area.append("–ü–∞–ø–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.")
    def get_text_dialog(self, title, label, *args, **kwargs):
        text, ok = QInputDialog.getText(self, title, label)
        if ok and text.strip():
            return text.strip()
        return None
    def update_session_progress(self, percent: int, message: str, *args, **kwargs):
        if not self._is_closing:
            self.progress_widget.update_progress(percent, message)
    def closeEvent(self, event, *args, **kwargs) -> None:
        self._is_closing = True
        self.log_area.append("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º...")
        self.stop_all_operations()
        event.accept()
    def handle_stop(self, *args, **kwargs) -> None:
        self.running = False
        self.log_area.append("‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å...")
        self.stop_all_operations()
        self.start_btn.setEnabled(True)
        self.stop_btn.setEnabled(False)
        self.progress_widget.update_progress(100, "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        self.log_area.append("‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        for btn in self.param_buttons:
            btn.setEnabled(True)
        self.param_input.setEnabled(True)
    def handle_session_finished(self, session_path: str, success: bool) -> None:
        if self._is_closing:
            return
        self.completed_sessions.add(session_path)
        progress = len(self.completed_sessions) * 100 // self.total_sessions
        self.progress_widget.update_progress(
            progress,
            f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ {len(self.completed_sessions)}/{self.total_sessions}"
        )
        if len(self.completed_sessions) >= self.total_sessions:
            self.running = False
            self.start_btn.setEnabled(True)
            self.stop_btn.setEnabled(False)
            for btn in self.param_buttons:
                btn.setEnabled(True)
            self.param_input.setEnabled(True)
            self.progress_widget.update_progress(100, "–í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
            self.log_area.append(f"‚úÖ –í—Å–µ {self.total_sessions} —Å–µ—Å—Å–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
    @pyqtSlot()
    def on_fill_profile_clicked(self, *args, **kwargs):
        self.report_shown = False
        if self.running:
            self.log_area.append("‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        if not self.selected_sessions:
            self.log_area.append("‚ö†Ô∏è –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏")
            return
        use_proxy = self.use_proxy_checkbox.isChecked()
        proxy = None
        if use_proxy:
            config = load_config()
            proxy = load_proxy(config)
            if proxy:
                self.log_area.append(f"üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏: {proxy.get('addr', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
            else:
                self.log_area.append("‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ –≤–∫–ª—é—á–µ–Ω, –Ω–æ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        else:
            self.log_area.append("‚ÑπÔ∏è –ü—Ä–æ–∫—Å–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
        if hasattr(self, 'image_folder') and os.path.exists(self.image_folder):
            self.log_area.append(f"üñºÔ∏è –ë—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∞–≤–∞—Ç–∞—Ä–∫–∏ –∏–∑ –ø–∞–ø–∫–∏: {self.image_folder}")
        else:
            result = QMessageBox.question(
                self,
                "–ê–≤–∞—Ç–∞—Ä–∫–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã",
                "–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –ø–∞–ø–∫—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Å–º–µ–Ω—ã –∞–≤–∞—Ç–∞—Ä–∞?",
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
            )
            if result == QMessageBox.StandardButton.No:
                self.log_area.append("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤")
                return
        self.running = True
        self.completed_sessions = set()
        self.active_param = 'fill_profile'
        self.start_btn.setEnabled(False)
        self.stop_btn.setEnabled(True)
        for btn in self.param_buttons:
            btn.setEnabled(False)
        self.param_input.setEnabled(False)
        self.total_sessions = len(self.selected_sessions)
        self.progress_widget.update_progress(0, "–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞...")
        for session_path in self.selected_sessions:
            thread = SessionThread(self, session_path, 'fill_profile',
                                   {'avatar_folder': getattr(self, 'image_folder', None)}, proxy)
            thread.log_signal.connect(lambda msg: self.log_area.append(msg))
            thread.error_signal.connect(self.handle_session_error)
            thread.progress_signal.connect(self.update_session_progress)
            thread.done_signal.connect(lambda: self._on_thread_finished(thread))
            self.thread_manager.start_thread(thread)
            launch_progress = self.thread_manager.get_total_count() * 100 // self.total_sessions
            self.progress_widget.update_progress(
                launch_progress,
                f"–ó–∞–ø—É—â–µ–Ω–æ {self.thread_manager.get_total_count()}/{self.total_sessions}"
            )
    def run_async(self, coro, *args, **kwargs):
        loop = asyncio.get_event_loop()
        return asyncio.create_task(coro) if loop.is_running() else loop.run_until_complete(coro)
    @pyqtSlot()
    def handle_start(self) -> None:
        self.report_shown = False
        if self.running:
            self.log_area.append("‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        if not self.selected_sessions:
            self.log_area.append("‚ö†Ô∏è –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏")
            return
        if not self.active_param:
            self.log_area.append("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (–∏–º—è, —Ñ–∞–º–∏–ª–∏—è, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ç.–¥.)")
            return
        use_proxy = self.use_proxy_checkbox.isChecked()
        proxy = None
        if use_proxy:
            config = load_config()
            proxy = load_proxy(config)
            if proxy:
                self.log_area.append(f"üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏: {proxy.get('addr', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
            else:
                self.log_area.append("‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ –≤–∫–ª—é—á–µ–Ω, –Ω–æ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        else:
            self.log_area.append("‚ÑπÔ∏è –ü—Ä–æ–∫—Å–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
        value = None
        if self.active_param == 'avatar':
            if not hasattr(self, 'image_folder') or not os.path.exists(self.image_folder):
                self.log_area.append("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")
                return
            value = self.image_folder
        elif self.active_param == 'twoFA':
            new_password = self.param_input.text().strip()
            if not new_password:
                self.log_area.append("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å 2FA")
                return
            value = {'new': new_password}
        elif self.active_param in ['first_name', 'last_name', 'about', 'username']:
            value = self.param_input.text().strip()
            if not value:
                self.log_area.append(f"‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {self.active_param}")
                return
        self.running = True
        self.completed_sessions = set()
        self.start_btn.setEnabled(False)
        self.stop_btn.setEnabled(True)
        for btn in self.param_buttons:
            btn.setEnabled(False)
        self.param_input.setEnabled(False)
        self.total_sessions = len(self.selected_sessions)
        self.progress_widget.update_progress(0, "–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞...")
        for session_path in self.selected_sessions:
            thread_value = value
            if self.active_param == 'twoFA':
                json_path = session_path.replace('.session', '.json')
                old_password = ''
                if os.path.exists(json_path):
                    try:
                        with open(json_path, 'r', encoding='utf-8') as f:
                            data = json.load(f)
                        old_password = data.get('twoFA', '')
                    except Exception:
                        pass
                thread_value = {'old': old_password, 'new': value['new']}
            thread = SessionThread(self, session_path, self.active_param, thread_value, proxy)
            thread.log_signal.connect(lambda msg: self.log_area.append(msg))
            thread.error_signal.connect(self.handle_session_error)
            thread.progress_signal.connect(self.update_session_progress)
            thread.done_signal.connect(lambda: self._on_thread_finished(thread))
            self.thread_manager.start_thread(thread)
            launch_progress = self.thread_manager.get_total_count() * 100 // self.total_sessions
            self.progress_widget.update_progress(
                launch_progress,
                f"–ó–∞–ø—É—â–µ–Ω–æ {self.thread_manager.get_total_count()}/{self.total_sessions}"
            )
    def handle_session_error(self, error_type: str, message: str) -> None:
        error_prefix = {
            'FloodWait': '‚è≥',
            'AuthError': 'üîí',
            'NetworkError': 'üåê',
            'FileError': 'üìÅ',
            '2FAError': 'üîë',
            'ThreadError': '‚ö†Ô∏è',
            'ProcessError': '‚ùå',
            'InitError': '‚ö†Ô∏è'
        }.get(error_type, '‚ùå')
        self.log_area.append(f"{error_prefix} {message}")
    def _on_thread_finished(self, thread: BaseThread):
        self.completed_sessions.add(thread.session_path)
        progress = len(self.completed_sessions) * 100 // self.total_sessions
        self.progress_widget.update_progress(
            progress,
            f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ {len(self.completed_sessions)}/{self.total_sessions}"
        )
        if len(self.completed_sessions) >= self.total_sessions and not self.report_shown:
            self.report_shown = True
            self.running = False
            self.start_btn.setEnabled(True)
            self.stop_btn.setEnabled(False)
            for btn in self.param_buttons:
                btn.setEnabled(True)
            self.param_input.setEnabled(True)
            self.progress_widget.update_progress(100, "–í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
            self.log_area.append(f"‚úÖ –í—Å–µ {self.total_sessions} —Å–µ—Å—Å–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
class SessionThread(BaseThread):
    log_signal = pyqtSignal(str)
    error_signal = pyqtSignal(str, str)
    progress_signal = pyqtSignal(int, str)
    done_signal = pyqtSignal(str, bool)
    def __init__(self, parent, session_path: str, param: str, value: Any, proxy: Optional[Dict] = None):
        super().__init__(session_file=os.path.basename(session_path), parent=parent)
        self.parent = parent
        self.session_path = session_path
        self.session_file = os.path.basename(session_path)
        self.param = param
        self.value = value
        self.proxy = proxy
        self.running = True
        self.session_folder = os.path.dirname(session_path)
        self.connection = TelegramConnection(self.session_folder)
        self.connection.log_signal.connect(self.handle_log)
        self.connection.error_signal.connect(self.handle_error)
        self.connection.progress_signal.connect(self.progress_signal.emit)
    def handle_log(self, message, *args, **kwargs):
        self.log_signal.emit(message)
    def handle_error(self, session_file: str, error: TelegramError, *args, **kwargs):
        if not self.running:
            return
        error_type_str = error.type.name if hasattr(error.type, 'name') else str(error.type)
        if error.type == TelegramErrorType.FLOOD_WAIT:
            if not self.running:
                return
            self.log_signal.emit(f"‚è≥ {os.path.basename(session_file)} | –û–∂–∏–¥–∞–Ω–∏–µ {error.wait_time} —Å–µ–∫")
        else:
            if not self.running:
                return
            self.error_signal.emit(error_type_str, f"{os.path.basename(session_file)} | –û—à–∏–±–∫–∞: {error.message}")
    def stop(self, *args, **kwargs):
        super().stop()
    def run(self, *args, **kwargs):
        super().run()
    async def process(self, *args, **kwargs):
        try:
            if not self.running:
                return
            success, user = await self.connection.connect(self.session_file, use_proxy=bool(self.proxy))
            if not success or not user:
                self.emit_log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Å—Å–∏–∏: {os.path.basename(self.session_file)}")
                return
            try:
                if self.param == 'fill_profile':
                    await self.generate_and_update_profile(self.connection.client)
                elif self.param == 'first_name':
                    await self.connection.client(UpdateProfileRequest(first_name=self.value))
                    self.emit_log(f"‚úÖ {os.path.basename(self.session_file)} | –ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ")
                    await self.connection.update_session_info(self.session_file, await self.connection.client.get_me())
                elif self.param == 'last_name':
                    await self.connection.client(UpdateProfileRequest(last_name=self.value))
                    self.emit_log(f"‚úÖ {os.path.basename(self.session_file)} | –§–∞–º–∏–ª–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞")
                    await self.connection.update_session_info(self.session_file, await self.connection.client.get_me())
                elif self.param == 'about':
                    await self.connection.client(UpdateProfileRequest(about=self.value))
                    self.emit_log(f"‚úÖ {os.path.basename(self.session_file)} | –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ")
                    await self.connection.update_session_info(self.session_file, await self.connection.client.get_me())
                elif self.param == 'username':
                    await self.connection.client(UpdateUsernameRequest(username=self.value))
                    self.emit_log(f"‚úÖ {os.path.basename(self.session_file)} | Username –∏–∑–º–µ–Ω—ë–Ω")
                    await self.connection.update_session_info(self.session_file, await self.connection.client.get_me())
                elif self.param == 'avatar':
                    await self.update_avatar(self.connection.client)
                elif self.param == 'twoFA':
                    await self.update_2fa(self.connection.client)
            except FloodWaitError as e:
                wait_time = e.seconds
                self.emit_log(f"‚è≥ {os.path.basename(self.session_file)} | –û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥")
                if wait_time < 120 and self.running:
                    await asyncio.sleep(wait_time)
                    self.emit_log(f"‚è≥ {os.path.basename(self.session_file)} | –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è")
                    await self.process()
                else:
                    self.emit_log(f"‚ö†Ô∏è {os.path.basename(self.session_file)} | –°–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ: {wait_time} —Å–µ–∫—É–Ω–¥")
            except Exception as e:
                self.emit_log(f"‚ùå {os.path.basename(self.session_file)} | –û—à–∏–±–∫–∞: {str(e)}")
        except Exception as e:
            self.emit_log(f"‚ùå {os.path.basename(self.session_file)} | –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
        finally:
            if self.connection:
                await self.connection.disconnect()
    async def generate_and_update_profile(self, client, *args, **kwargs):
        faker = Faker('ru_RU')
        gender = faker.random_element(elements=("male", "female"))
        if gender == "male":
            first_name = faker.first_name_male()
            last_name = faker.last_name_male()
        else:
            first_name = faker.first_name_female()
            last_name = faker.last_name_female()
        start_phrases = [
            "–õ—é–±–ª—é", "–ù–µ –ª—é–±–ª—é", "–ò—â—É", "–ó–∞–Ω–∏–º–∞—é—Å—å", "–•–æ—á—É", "–û–±–æ–∂–∞—é", "–ü—ã—Ç–∞—é—Å—å", "–ù–µ –ø—Ä–æ–ø—É—Å–∫–∞—é",
            "–•–æ–∂—É", "–ñ–∏–≤—É", "–ò–Ω–æ–≥–¥–∞", "–ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ü–µ–Ω—é", "–ú–µ—á—Ç–∞—é", "–£–≤–ª–µ–∫–∞—é—Å—å"
        ]
        middle_phrases = [
            "–≤–∏–¥–µ–æ –∏–≥—Ä—ã", "—Å–ø–æ–∫–æ–π–Ω—ã–µ –≤–µ—á–µ—Ä–∞", "–Ω–æ–≤—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞", "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–ø—Å–∏—Ö–æ–ª–æ–≥–∏—é", "—Å–ø–æ—Ä—Ç",
            "–º—É–∑—ã–∫—É", "–∫–Ω–∏–≥–∏", "—Ä–∞–∑–Ω—ã–µ —Ö–æ–±–±–∏", "–∫–Ω–∏–≥–∏ –ø–æ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—é", "–º—É–¥—Ä–æ—Å—Ç—å", "–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã",
            "–∫–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–æ –∏–≥—Ä—ã", "–º—É–¥—Ä—ã–µ —Ü–∏—Ç–∞—Ç—ã", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "—Ä–∞–∑–≥–æ–≤–æ—Ä—ã –æ –∂–∏–∑–Ω–∏", "–∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö"
        ]
        end_phrases = [
            "–∏ –Ω–∞—Å–ª–∞–∂–¥–∞—é—Å—å –∫–∞–∂–¥—ã–º –º–æ–º–µ–Ω—Ç–æ–º.", "–∏ –Ω–µ –∂–∞–ª–µ—é –æ–± —ç—Ç–æ–º.", "–∏ —ç—Ç–æ —Ç–æ, —á—Ç–æ –º–Ω–µ –Ω—É–∂–Ω–æ.",
            "–∏ –∂–¥—É –Ω–æ–≤—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∏–π.", "–∏ –º–µ–Ω—è —ç—Ç–æ –≤—Å–µ–≥–¥–∞ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç.", "–∏ –æ–±–æ–∂–∞—é —ç—Ç–∏–º –¥–µ–ª–∏—Ç—å—Å—è.",
            "–∏ —ç—Ç–æ –ø—Ä–∏–Ω–æ—Å–∏—Ç –º–Ω–µ —Å—á–∞—Å—Ç—å–µ.", "–∏ —ç—Ç–æ –≤—Å–µ–≥–¥–∞ –ø–æ–º–æ–≥–∞–µ—Ç –º–Ω–µ –±—ã—Ç—å —Å–æ–±–æ–π.",
            "–∏ –Ω–µ –º–æ–≥—É –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å —Å–µ–±—è –±–µ–∑ —ç—Ç–æ–≥–æ.", "–∏ –≤—Å–µ–≥–¥–∞ –Ω–∞—Ö–æ–∂—É —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ.",
            "–∏ –≤—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —ç—Ç–∏–º —Å –¥—Ä—É–≥–∏–º–∏.", "–∏ –Ω–µ —É–ø—É—Å–∫–∞—é —à–∞–Ω—Å –ø–æ–≤–µ—Å–µ–ª–∏—Ç—å—Å—è.",
            "–∏ —ç—Ç–æ –¥–ª—è –º–µ–Ω—è –≥–ª–∞–≤–Ω–æ–µ.", "–∏ –±—É–¥—É —Ä–∞–¥, –µ—Å–ª–∏ —Ç—ã —Ç–æ–∂–µ —É–≤–ª–µ—á–µ–Ω —ç—Ç–∏–º."
        ]
        about = f"{random.choice(start_phrases)} {random.choice(middle_phrases)} {random.choice(end_phrases)}"
        about = about[:70]
        await client(UpdateProfileRequest(
            first_name=first_name,
            last_name=last_name,
            about=about
        ))
        self.emit_log(f"‚úÖ {os.path.basename(self.session_file)} | –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω:")
        self.emit_log(f"   üë§ –ò–º—è: {first_name} {last_name}")
        self.emit_log(f"   üìù –û–ø–∏—Å–∞–Ω–∏–µ: {about}")
        base_username = self.latinize(first_name.lower() + last_name.lower())
        base_username = re.sub(r'[^a-zA-Z0-9]', '', base_username)
        if not base_username or not base_username[0].isalpha():
            base_username = 'user' + base_username
        base_username = base_username[:32]
        if len(base_username) < 5:
            base_username += ''.join(random.choices('0123456789', k=5-len(base_username)))
        if not base_username[-1].isalnum():
            base_username = base_username[:-1] + 'a'
        username_set = False
        try:
            me = await client.get_me()
            current_username = (me.username or '').lower()
        except Exception:
            current_username = ''
        if base_username != current_username:
            tried = set()
            max_attempts = 5
            attempt = 0
            while not username_set and attempt < max_attempts:
                try:
                    if attempt == 0:
                        username = base_username
                    else:
                        letter = random.choice(string.ascii_lowercase)
                        digit = random.choice('0123456789')
                        username = f"{base_username[:30]}{letter}{digit}"
                    if username in tried:
                        continue
                    tried.add(username)
                    await client(UpdateUsernameRequest(username=username))
                    username_set = True
                    self.emit_log(f"‚úÖ {os.path.basename(self.session_file)} | Username —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: @{username}")
                except Exception as e:
                    attempt += 1
                    if attempt >= max_attempts:
                        self.emit_log(f"‚ö†Ô∏è {os.path.basename(self.session_file)} | –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å username: {str(e)}")
                        username = ""
        me = await client.get_me()
        json_path = os.path.join(self.session_folder, self.session_file.replace('.session', '.json'))
        try:
            current_data = {}
            if os.path.exists(json_path):
                with open(json_path, 'r', encoding='utf-8') as f:
                    current_data = json.load(f)
            current_data.update({
                'first_name': first_name,
                'last_name': last_name,
                'about': about,
                'username': username if username_set else "",
                'last_update': datetime.now().isoformat()
            })
            with open(json_path, 'w', encoding='utf-8') as f:
                json.dump(current_data, f, ensure_ascii=False, indent=4)
            self.emit_log(f"‚úÖ {os.path.basename(self.session_file)} | –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ JSON")
        except Exception as e:
            self.error_signal.emit("JsonError", f"{os.path.basename(self.session_file)} | –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è JSON: {e}")
    def latinize(self, text: str) -> str:
        trans_table = str.maketrans({
            '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'e',
            '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'i', '–∫': 'k', '–ª': 'l', '–º': 'm',
            '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
            '—Ñ': 'f', '—Ö': 'h', '—Ü': 'c', '—á': 'ch', '—à': 'sh', '—â': 'sh', '—ä': '',
            '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
        })
        return text.lower().translate(trans_table)
    async def update_avatar(self, client, *args):
        try:
            if not os.path.exists(self.value):
                self.error_signal.emit("FileError", f"{os.path.basename(self.session_file)} | –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.value}")
                return
            images = [f for f in os.listdir(self.value) if f.lower().endswith(('.jpg', '.jpeg', '.png'))]
            if not images:
                self.error_signal.emit("FileError", f"{os.path.basename(self.session_file)} | –í –ø–∞–ø–∫–µ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                return
            image_path = os.path.join(self.value, random.choice(images))
            with Image.open(image_path) as img:
                img = img.convert("RGB")
                img = img.resize((512, 512), Image.LANCZOS)
                output = io.BytesIO()
                img.save(output, format='JPEG', quality=95)
                output.seek(0)
                file = await client.upload_file(output)
                await client(UploadProfilePhotoRequest(file=file))
            self.emit_log(f"‚úÖ {os.path.basename(self.session_file)} | –ê–≤–∞—Ç–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω")
            json_path = os.path.join(self.session_folder, self.session_file.replace('.session', '.json'))
            try:
                if os.path.exists(json_path):
                    with open(json_path, 'r', encoding='utf-8') as f:
                        data = json.load(f)
                    data['has_profile_pic'] = True
                    data['last_update'] = datetime.now().isoformat()
                    with open(json_path, 'w', encoding='utf-8') as f:
                        json.dump(data, f, ensure_ascii=False, indent=4)
            except Exception as e:
                self.error_signal.emit("JsonError", f"{os.path.basename(self.session_file)} | –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è JSON: {e}")
        except Exception as e:
            self.error_signal.emit("AvatarError", f"{os.path.basename(self.session_file)} | {str(e)}")
    async def update_2fa(self, client, *args, **kwargs):
        try:
            if isinstance(self.value, dict):
                old_password = self.value.get('old', '')
                new_password = self.value.get('new', '')
            else:
                old_password = ''
                new_password = self.value
            try:
                if old_password:
                    await client.edit_2fa(current_password=old_password, new_password=new_password)
                else:
                    await client.edit_2fa(new_password=new_password)
                self.emit_log(f"‚úÖ {os.path.basename(self.session_file)} | 2FA –ø–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω")
                json_path = os.path.join(self.session_folder, self.session_file.replace('.session', '.json'))
                try:
                    if os.path.exists(json_path):
                        with open(json_path, 'r', encoding='utf-8') as f:
                            data = json.load(f)
                        data['twoFA'] = new_password
                        data['last_update'] = datetime.now().isoformat()
                        with open(json_path, 'w', encoding='utf-8') as f:
                            json.dump(data, f, ensure_ascii=False, indent=4)
                except Exception as e:
                    self.error_signal.emit("JsonError", f"{os.path.basename(self.session_file)} | –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è JSON: {e}")
            except PasswordHashInvalidError:
                self.error_signal.emit("2FAError", f"{os.path.basename(self.session_file)} | –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å 2FA")
            except Exception as e:
                self.error_signal.emit("2FAError", f"{os.path.basename(self.session_file)} | {str(e)}")
        except Exception as e:
            self.error_signal.emit("2FAError", f"{os.path.basename(self.session_file)} | {str(e)}")
